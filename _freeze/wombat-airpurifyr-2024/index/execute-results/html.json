{
  "hash": "ced404ba8bdc7296987c0d054b89c70a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`airpurifyr`: Open Air Quality in R\"\nauthor: M. J. Lydeamore, D. Wu, J. P. Lakshika\ndate: today\nexecute:\n  cache: true\n  echo: true\nformat:\n    presentation-revealjs+letterbox:\n        fig-align: center\n---\n\n::: {.cell}\n<style type=\"text/css\">\nfigcaption {\n    text-align: center;\n}\n\n.center {\n  text-align: center;\n}\n</style>\n:::\n\n::: {.cell}\n\n:::\n\n\n## Air Quality\n\nAll sorts of processes release particles into the air\n\nThese measurements together form \"air quality\".\n\n::: {.fragment}\nHas been linked with health conditions, life expectancy, mental conditions, poorer economic outcomes, global development indexes...\n:::\n\n## Air Quality {.incremental}\n\nTypical measurements:\n\n* `pm2.5`/`pm5`: Particles that are 2.5/5 microns. Typically come from fires, industry, car exhausts etc\n* `so2`: Sulfur Dioxide. Typically oil refineries, diesel vehicles, coal power stations\n* `o3`: Ozone. Typically bushfires, power stations. We want ozone but not too much!\n* `no2`: Nitrogen dioxide. Typically car exhausts.\n* `co`: Carbon monoxide. Typically Wood smoke, car exhausts.\n\n## Uses\n\n### Public Health\n\n::: {.incremental}\n\n* Association of Changes in Air Quality With Incident Asthma in Children in California, 1993-2014 (Garcia et. al, JAMA 2019)\n* Uncertainty and Variability in Health-Related Damages from Coal-Fired Power Plants in the United States (Levy et. al, Risk Analysis 2009)\n\n:::\n\n## Uses\n\n### Economics\n\n::: {.incremental}\n\n* A cost-effectiveness analysis of alternative air quality control strategies (Atkinson & Lewis, Journal of Environmental Economics and Management **1974**)\n* Cost of economic growth: Air pollution and health expenditure (Chen & Chen, Science of the Total Environment 2021)\n\n:::\n\n::: {.fragment}\n...and more\n:::\n\n## Air Quality\n\nSo people need this. But how?\n\n* Ad-hoc\n* Single dataset/source\n* Range of dates/times\n* \"Whatever is available\"\n\n## So how is it collected?\n\nSome (in this case 61%) governments have programs to collect this data. Much of the global data is sought from citizen science projects.\n\n![An air quality sensor](images/monitor.png){fig-align=\"center\"}\n\n\n## OpenAQ\n\n[OpenAQ](www.openaq.org) is an environmental tech nonprofit.\n\nAggregate and harmonize open air quality data from across the globe onto an open-source, open-access data platform\n\nFreely available API and [data explorer](https://explore.openaq.org/)\n\n## The package\n\n`airpurifyr` brings this API into R.\n\n* Uses `httr` (will one day be ported)\n* `v2` OpenAQ API (deprecated 18 days ago ðŸ˜­)\n* Requires a free API key\n\n## Package example\n\nAPI effectively works on _locations_ and _measurements_\n\n\n::: {.cell}\n\n```{.r .cell-code}\naustralia_measurements <- get_measurements_for_location(\n  country = \"AU\",\n  max_observations = 1000,\n  date_from = lubridate::ymd(\"2020-01-01\"),\n  date_to = lubridate::ymd(\"2020-01-14\"),\n  parameter = \"pm25\"\n)\n\naustralia_measurements\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19,032 Ã— 9\n   location_id location parameter value date_utc            unit    lat  long\n         <int> <chr>    <chr>     <dbl> <dttm>              <chr> <dbl> <dbl>\n 1        2487 Bathurst pm25       18.9 2020-01-14 00:00:00 Âµg/mÂ³ -33.4  150.\n 2        2487 Bathurst pm25       19.4 2020-01-13 23:00:00 Âµg/mÂ³ -33.4  150.\n 3        2487 Bathurst pm25       20.2 2020-01-13 22:00:00 Âµg/mÂ³ -33.4  150.\n 4        2487 Bathurst pm25       20.9 2020-01-13 21:00:00 Âµg/mÂ³ -33.4  150.\n 5        2487 Bathurst pm25       22.1 2020-01-13 20:00:00 Âµg/mÂ³ -33.4  150.\n 6        2487 Bathurst pm25       23   2020-01-13 19:00:00 Âµg/mÂ³ -33.4  150.\n 7        2487 Bathurst pm25       23.7 2020-01-13 18:00:00 Âµg/mÂ³ -33.4  150.\n 8        2487 Bathurst pm25       24.6 2020-01-13 17:00:00 Âµg/mÂ³ -33.4  150.\n 9        2487 Bathurst pm25       25.3 2020-01-13 16:00:00 Âµg/mÂ³ -33.4  150.\n10        2487 Bathurst pm25       25.8 2020-01-13 15:00:00 Âµg/mÂ³ -33.4  150.\n# â„¹ 19,022 more rows\n# â„¹ 1 more variable: country <chr>\n```\n\n\n:::\n:::\n\n\n## Package example\n\n::: {.callout-important}\nYou will need to aggregate this data - sensors often report times to the second and may be slightly off!\n\n`lubridate::floor_date` is great for this\n:::\n\n## Package example\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Package example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocations_of_interest <- australia_measurements |>\n  # East coast of Australia (roughly)\n  dplyr::filter(long > 141, lat < -31) |>\n  dplyr::distinct(location) |>\n  dplyr::pull()\n\nau_east_coast_2020 <- get_measurements_for_location(\n  country = \"AU\",\n  location = locations_of_interest,\n  max_observations = 10000,\n  date_from = lubridate::ymd(\"2019-12-01\"),\n  date_to = lubridate::ymd(\"2020-02-01\"),\n  parameter = \"pm25\"\n)\n```\n:::\n\n\n## Package example\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nstates <- ozmaps::ozmap_states |>\n  filter(NAME %in% c(\"New South Wales\", \"Victoria\"))\n\nstations <- au_east_coast_2020 |>\n  distinct(lat, long)\n\nggplot(states) +\n  geom_sf() +\n  geom_point(\n    aes(x = long, y = lat), \n    data = stations\n  ) +\n  theme_bw() +\n  labs(x=\"Longitude\", y=\"Latitude\") +\n  coord_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-6-1.png){width=576}\n:::\n:::\n\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmelb_weather <- get_data_drill(\n  latitude = -37.8,\n  longitude = 145,\n  start_date = \"20200101\",\n  end_date = \"20200630\",\n  values = \"all\"\n)\nx <- get_data_drill(\n  latitude = -37.8,\n  longitude = 145,\n  start_date = \"20200701\",\n  end_date = \"20201231\",\n  values = \"all\"\n)\nmelb_weather <- bind_rows(melb_weather, x)\n```\n:::\n\n\n## Examples\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n::: {.fragment}\nHigh pressure $\\rightarrow$ temperature inversion $\\rightarrow$ more ozone loss\n:::\n\n# Industrial fires\n\nThanh Cuong Nguyen & Arun Krishnasamy\n\n## Industrial fires\n\nOn July 11, there was a major factory fire in Brooklyn.\n\n::: {.fragment}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=1344}\n:::\n:::\n\n:::\n\n# Nearby sensors\n\nPooja Rejendran Raju & Thi My Ngoc Tran\n\n## Nearby sensors\n\nWe can check geographical coherence\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n# Rush hour\n\nNamandeep Kaur Saluja & Rowshni Farnaz Fatema\n\n## Rush hour\n\nCan we pick up extra pollutants from the weekday \"rush-hour\" in Melbourne CBD?\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Summary\n\n* OpenAQ gives reasonably clean air quality data\n* `airpurifyr` helps bring this into R\n* Plenty of hypotheses ready to explore\n\nNext steps:\n\n* `v3` API\n* `httr2`\n* More convenience cleaning/aggregating\n\nAvailable at [https://github.com/numbats/airpurifyr](https://github.com/numbats/airpurifyr)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}